// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4240.troTek2019.subsystems;


import org.usfirst.frc4240.troTek2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark sC3;
    private Spark sC4;
    private SpeedControllerGroup rightSC;
    private Spark sC1;
    private Spark sC2;
    private SpeedControllerGroup leftSC;
    private DifferentialDrive diffDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        sC3 = new Spark(2);
        addChild("SC3",sC3);
        sC3.setInverted(false);
        
        sC4 = new Spark(3);
        addChild("SC4",sC4);
        sC4.setInverted(false);
        
        rightSC = new SpeedControllerGroup(sC3, sC4  );
        addChild("rightSC",rightSC);
        
        
        sC1 = new Spark(0);
        addChild("SC1",sC1);
        sC1.setInverted(false);
        
        sC2 = new Spark(1);
        addChild("SC2",sC2);
        sC2.setInverted(false);
        
        leftSC = new SpeedControllerGroup(sC1, sC2  );
        addChild("leftSC",leftSC);
        
        
        diffDrive1 = new DifferentialDrive(leftSC, rightSC);
        addChild("diffDrive1",diffDrive1);
        diffDrive1.setSafetyEnabled(true);
        diffDrive1.setExpiration(0.1);
        diffDrive1.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveWithController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void takejoysticksinput(double left, double right) {
    	diffDrive1.tankDrive(left, right);
    }
    public void stop() {
        diffDrive1.stopMotor();
    }
}

